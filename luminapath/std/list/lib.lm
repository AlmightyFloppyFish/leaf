use std:maybe [Maybe [..]]
use std:math [Compare, Num [+]]

@![langItem(list as List)]

// NOTE: DO NOT SWITCH PLACES OF METHODS.
//
// THEIR INDICES ARE CONSTANTS IN COMPILER. 
trait Listable a
  @[precedence 1000]
  fn : as a, self -> self
  fn new as self = Listable(self as self, a as a):with_capacity 0
  fn with_capacity as int -> self
  fn split as self -> Maybe (a, self)

type List a = Cons a (List a) | Nil

impl Listable a for List a
  fn : x xs as a, List a -> List a =
    Cons x xs

  fn with_capacity _ as int -> List a =
    Nil

  fn split list as List a -> Maybe (a, List a) = 
    match list
    | Cons x xs -> Just (x, xs)
    | Nil -> Nothing

fn ++ left right as [a], [a] -> [a] =
  match left
  | [] -> right
  | [x : xs]  -> Cons x (xs ++ right)

fn fold f acc list as fn(b, a -> b), b, [a] -> b =
  match list
  | [x : xs] -> fold #f (f acc x) xs
  | []       -> acc

fn map f list as fn(a -> b), [a] -> [b] =
  match list
  | [x : xs] -> f x : map #f xs
  | []       -> []

when n can Num
fn sum list as [n] -> n =
  fold #+ Num(self as n):zero list

fn max list as [n] -> Maybe n = 
  fold #(\acc n -> Compare:max acc (Just n)) Nothing list

when n can Compare
fn min list as [n] -> Maybe n = 
  fold #(\acc n -> Compare:min acc (Just n)) Nothing list
