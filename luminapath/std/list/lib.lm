use std:maybe [Maybe [..]]
use std:math [Compare, Num [+]]
use vec [Vec, Slice]

@![langItem(list as List)]

// NOTE: DO NOT SWITCH PLACES OF METHODS.
//
// THEIR INDICES ARE CONSTANTS IN COMPILER. 
pub trait Listable a
  @[precedence 1000]
  fn : as a, self -> self
  fn new as self = Listable(self as self, a as a):with_capacity 0
  fn with_capacity as int -> self
  fn split as self -> Maybe (a, self)

pub type List a = Slice (Slice a) | Concat self self | Singleton a | Nil

impl Listable a for List a
  fn : x xs as a, List a -> List a =
    match xs
    | Nil -> Singleton x
    | _   -> Concat (Singleton x) xs

  fn with_capacity len as int -> List a =
    Nil

  fn split list as List a -> Maybe (a, List a) = 
    match list
    | Slice slice -> 
      vec:split slice
      . map #(\(v, right) -> (v, if right . is_empty then Nil else Slice right))

    | Singleton a -> Just (a, Nil)
    | Nil         -> Nothing

    | Concat left right -> 
      split left 
      . map #(\(v, leftright) -> (v, leftright ++ right))

pub fn ++ left right as List a, List a -> List a =
  match left
  | Nil -> right
  | _   -> 
    match right
    | Nil -> left
    | _ -> Concat left right

// TODO: we should remake this in a vastly more performant way by taking advantage of the concrete variants
pub fn fold f acc list as fn(b, a -> b), b, [a] -> b =
  match list
  | [x : xs] -> fold #f (f acc x) xs
  | []       -> acc

// TODO: we should remake this in a vastly more performant way by taking advantage of the concrete variants
pub fn map f list as fn(a -> b), [a] -> [b] =
  match list
  | [x : xs] -> f x : map #f xs
  | []       -> []

when n can Num
pub fn sum list as [n] -> n =
  fold #+ Num(self as n):zero list

when n can Compare
pub fn max list as [n] -> Maybe n = 
  match list
  | [] -> Nothing
  | [x : xs] -> Just (fold #Compare:max x xs)

when n can Compare
pub fn min list as [n] -> Maybe n = 
  match list
  | [] -> Nothing
  | [x : xs] -> Just (fold #Compare:min x xs)

pub fn len list as List a -> uint =
  match list
  | Slice slice -> slice.vec.len - slice.start
  | Singleton a -> 1
  | Concat left right -> len left + len right
  | Nil -> 0

pub fn forEach f list as fn(a -> ()), List a -> () =
  match list
  | Slice slice -> slice . forEach #f
  | Singleton a -> f a
  | Concat left right -> do forEach #f left then forEach #f right
  | Nil -> ()

pub fn itimes f n as fn(uint -> ()), uint -> () = 
  next 0
 where
  fn next i as uint -> () =
    if n == i then () else do f i then next (i + 1)

pub fn break f list as fn(a -> bool), [a] -> ([a], [a]) =
  match list
  | [] -> ([], [])
  | [x : xs] -> 
    if f x then
      (Nil, x : xs)
    else 
      let (left, right) = break #f xs in
        (x : left, right)
      // TODO: if we do pointer-equality on `:` could we optimise appending two `Slice`s
      // into shifting start of a singlular Slice?

when a can ToString
impl ToString for [a]
  fn show list as [a] -> string =
    "[" <++> show_ list
  where
    fn show_ list as [a] -> string = 
      match list
      | [] -> "[]"
      | [last] -> show last <++> "]"
      | [x : xs] -> show x <++> ", " <++> show_ xs

