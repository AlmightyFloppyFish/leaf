use std:list:vec [get, unsafe_get, unsafe_take, from_range]

pub type Slice a {
  vec   Vec a
  start uint
}

pub fn split {vec, start} as Slice a -> Maybe (a, Slice a) =
  get start vec
  . map #(\v -> (v, {Slice a | vec, start = start + 1}))

pub fn is_empty {vec, start} as Slice a -> bool =
  start >= vec.len

pub fn empty as Slice a = { vec = vec:empty, start = 0 }
  
// TODO: we should make it so that dot-calls prioritise type-specific *over* defined in current module
// for the sake of overloading. Local bindings should still be prioritised though?

pub fn len {vec, start} as Slice a -> uint =
  vec.len - start

pub fn forEach f slice as fn(a -> ()), Slice a -> () =
  list:itimes #perform (slice.vec.len - slice.start)
 where
  fn perform i as uint -> () = unsafe_get i slice.vec . f

pub fn map f slice as fn(a -> b), Slice a -> Vec b =
  from_range
    (slice.start, slice.vec.len)
    #(\i -> unsafe_get i slice.vec . f)

pub fn slice slice as Slice a -> Maybe (a, Slice a) =
  slice.vec . get slice.start
  . map #(\elem -> (elem, skip 1 slice))

// Splits the slice at the given index.
pub fn split_at at slice as uint, Slice a -> (Slice a, Slice a) =
    (take at slice, skip (at+1) slice)

pub fn take n slice as uint, Slice a -> Slice a =
  if n >= len slice
    then slice
    else { slice ~ vec @ vec = unsafe_take n vec }
  
pub fn skip n slice as uint, Slice a -> Slice a =
  if n >= len slice
    then empty
    else { slice ~ start @ start = start + n }
