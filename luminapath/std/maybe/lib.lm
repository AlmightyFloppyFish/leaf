use std:math [Compare [..]]

pub type Maybe a = Just a | Nothing

pub fn isJust m as Maybe a -> bool =
  match m
  | Just _  -> true
  | Nothing -> false

pub fn or f opt as fn(a), Maybe a -> a =
  match opt
  | Just a  -> a
  | Nothing -> f

pub fn map f m as fn(a -> b), Maybe a -> Maybe b = 
  match m
  | Just a  -> Just (f a)
  | Nothing -> Nothing

when a can Compare
impl Compare for Maybe a
  fn == a b as self, self -> bool = 
    match (a, b)
    | (Nothing, Nothing) -> true
    | (Just x, Just y)   -> x == y
    | _ -> false

  fn < a b  as self, self -> bool = 
    match (a, b)
    | (Nothing, Nothing) -> false
    | (Just x, Just y)   -> x < y
    | (Nothing, Just a)  -> true
    | (Just a, Nothing)  -> false
    
  fn > a b  as self, self -> bool =
    match (a, b)
    | (Nothing, Nothing) -> false
    | (Just x, Just y)   -> x > y
    | (Nothing, Just a)  -> false
    | (Just a, Nothing)  -> true

