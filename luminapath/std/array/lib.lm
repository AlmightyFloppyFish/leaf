use std:io
use std:ptr
use std:list

fn len arr as [a; n] -> uint = builtin:array_len arr

fn get i arr as uint, [a; n] -> a =
  if builtin:array_len arr >= i
    then builtin:array_get i arr
    else io:crash "out of bound"

// TODO: an optimization we definitely should do is to edge-case lowering a
// VEntry where the return mode is an out pointer parameter. 
//
// We could probably do that by just setting a flag in `Translator::self`
// OR: we can have a `VEntry::StackSlot` to edge-case statically known pointers?
// nah that wouldn't help here. (or no I think it actually would, hm)

// TODO: Can this cause corruption because of padding?
//
// We probably need to add `align` to `Size`
//
// Pretty sure this problem exists with lots of list stuff
fn map f arr as fn(a -> b), [a; n] -> [b; n] =
  let raw = builtin:alloca([b; n]) as *b in 
    do list:itimes #(transform_and_write raw) (len arr) 
     then raw as [b; n]
 where
  fn transform_and_write raw i as *b, uint -> () = 
    let elem = get i arr
     in ptr:write (ptr:offsetu raw (Size(b):of * i)) (f elem)

fn for_each f arr as fn(a -> ()), [a; n] -> () =
  list:itimes #(\i -> get i arr . f) (len arr) 
