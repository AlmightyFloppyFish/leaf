use std:math [Num [..], Compare [..]]
use std:maybe [Maybe [..]]
use std:string [string]
use std:nothing [nothing]
use std:ptr
use std:list [Listable [:], List]

@![langItem(list as List)]

trait Closure p r
  fn call as self, p -> r

trait Size
  fn of as int

type Type
  = Int bool u8
  | Float
  | Bool
  | Never
  | Poison
  | Pointer   Type
  | FnPointer Type
  | Struct string [Type]
  | Sum    string [(string, Type)]
  | Object string

impl Size for a
  fn of as int = size_of_ty builtin:reflect_type(self as a)

fn size_of_ty ty as Type -> int =
    match ty
    | Int _ size -> (size as int) / 8
    | Float  -> 8
    | Bool   -> 1
    | Never  -> 0
    | Poison -> 0
    | Pointer _ -> 8
    | FnPointer _ -> 8
    | Struct _ fields   -> fields . map #size_of_ty . sum
    | Sum    _ variants -> variants . map #(\_ ty -> size_of_ty ty) . max . or #0
    | Object _ -> 16 // TODO: remember to change this if we decide to change the repr

@[platform "linux"]
fn alloc size as int -> *u8 =
  mmtk_alloc main_thread_mutator size 8 0 0

@[platform "linux"]
fn dealloc ptr size as *u8, int -> () = free ptr

@[extern "free", platform "linux"]
fn free as *u8 -> ()

@[extern "x86_64_syscall", platform "linux"]
fn syscall as int, int, int, int, int, int -> ()

@[platform "x86_64-linux"]
fn raw_syscall_exit code as int -> () =
  do syscall code 0 0 0 0 60 then ()

@[platform "linux"]
fn exit code as int -> () =
  libc_exit code

@[extern "exit", platform "linux"]
fn libc_exit code as int -> ()

@[extern "mmtk_init", platform "linux"]
fn lumina_gc_init as uint -> ()

@[extern "mmtk_bind_mutator", platform "linux"]
fn mmtk_bind_mutator as *u8 -> *u8

@[extern "mmtk_alloc", platform "linux"]
fn mmtk_alloc mutator size align offset allocator
  as *u8, int, int, int, int -> *u8

// TODO: To support multi-threadding we'd need thread local storage
// then initialise MMTK seperately from creating the mutator
// then create a mutator for each thread
val main_thread_mutator as *u8 = 
  do lumina_gc_init 1048576 then
     let mutator = mmtk_bind_mutator ptr:null in mutator
       // do mmtk_initialize_collection mutator then mutator

@[extern "mmtk_initialize_collection", platform "linux"]
fn mmtk_initialize_collection as *u8 -> ()
