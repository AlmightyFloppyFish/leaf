fn get i list (int [a] -> a)
    rust:get i list

fn set i elem list (int a [a] -> [a])
    rust:set i elem list

fn length list ([a] -> int)
    rust:length list

fn remove i list (int [a] -> [a])
    rust:remove i list

fn first list ([a] -> a)
    get 0 list

fn last list ([a] -> a)
    get ((length list) - 1) list

fn map f list ((a -> b) [a] -> [b])
    transform_inner f list (length list)
fn map_inner f list i ((a -> b) [a] int -> [b])
    if i + 1 == 0 
      then modified
      else transform_inner #f modified next
        where modified = 
            \new: set i new list << f << get i list 

|| Same as map but ensures that the type of the list isn't changed
fn foreach f list ((a -> a) [a] -> [a])
    map #f list

fn is_empty list ([a] -> bool)
    length list == 0

fn contains elem list (a [a] -> bool)
    contains_inner elem list (length list)
fn contains_inner elem list i (a [a] int -> bool)
    if i == 0 
      then false
      elif get i list == elem
        then true
        else contains_inner elem list (i - 1)
